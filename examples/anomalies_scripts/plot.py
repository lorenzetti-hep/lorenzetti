import ROOT
from ROOT import TFile, TPad, TLatex
from ROOT import TCanvas, TH1F,TH2F,TH3F,TH1D,TH2D,TH3D, TH1I, TFile,TLine,TGraph, TGraph2D, TGraphErrors,TMultiGraph
from ROOT import TLatex, gPad, TLegend
from ROOT import kRed, kBlue, kBlack,TLine,kBird, kOrange,kGray, kYellow, kViolet, kGreen, kAzure
from ROOT import gROOT

from array import array
import numpy as np
import matplotlib.pyplot as plt 
import math
import argparse


# resources
def LZTLabel(canvas, x,y,text,color=1):
    l = TLatex()
    l.SetNDC()
    l.SetTextFont(72)
    l.SetTextColor(color)
    delx = 0.17*696*gPad.GetWh()/(472*gPad.GetWw())
    l.DrawLatex(x,y,"Lorenzetti")
    p = TLatex()
    p.SetNDC()
    p.SetTextFont(42)
    p.SetTextColor(color)
    p.DrawLatex(x+delx,y,text)

def AddTexLabel(canvas, x,y,text,color=1, textfont=42, textsize=0.1):
    tex = TLatex()
    tex.SetNDC()
    tex.SetTextFont(textfont)
    tex.SetTextColor(color)
    tex.SetTextSize(textsize)
    tex.DrawLatex(x,y,text)
    canvas.Modified()
    canvas.Update()   


parser = argparse.ArgumentParser()

parser.add_argument('-i1','--inputFile1', action='store', dest='inputFile1', required = False,
                    help = "The event input file generated by the Pythia event generator WITHOUT pileup.")

parser.add_argument('-i2','--inputFile2', action='store', dest='inputFile2', required = False,
                    help = "The event input file generated by the Pythia event generator WITH pileup.")

parser.add_argument('-o','--outputPath', action='store', dest='outputPath', required = False,
                    help = "Path on where to save plots.")

args = parser.parse_args()


f1 = ROOT.TFile.Open(args.inputFile1)
f2 = TFile(args.inputFile2)

if 'NTUPLE' in args.inputFile1:
    tree = f1.Get('events')
    e1 = [event.cluster_e for event in tree]
    tree = f2.Get('events')
    e2 = [event.cluster_e for event in tree]

else:
    exit()

# PLOT 1
h1 = TH1F("h1", "", 100, 0, 2000)
h2 = TH1F("h2", "", 100, 0, 2000)
for i in e1:
    h1.Fill(i/1000)
for i in e2:
    h2.Fill(i/1000)

h1.SetStats(0)  # Disable the statistics box
h2.SetLineColor(kBlue)
h1.SetLineColor(kRed)
h1.SetTitle("; Energy[GeV]; Counts; ")
h1.SetFillStyle(3000)  # hist with outline, not filled histogram
c1 = TCanvas ("c1","stacked hists",10,10,800,600)
c1.cd(1)
legend = TLegend(0.7, 0.7, 0.9, 0.9)
legend.AddEntry(h1, "Without Pileup", "l")
legend.AddEntry(h2, "With Pileup", "l")
h1.Draw()
h2.Draw("same")
legend.Draw("same")
c1.Draw()  
LZTLabel(c1, 0.1, 0.92, '#sqrt{s}=13TeV')
c1.SaveAs(f"{args.outputPath}/jet_LZT_E_comparison.pdf")


# PLOT 2
h1 = TH1F("h1", "", 100, 0, 2000)
h2 = TH1F("h2", "", 100, 0, 2000)
for i in e1:
    h1.Fill(i/1000)
for i in e2:
    h2.Fill(i/1000)

h2.Divide(h1)  
h2.SetStats(0)  # Disable the statistics box
h2.SetTitle(";  Energy[GeV]; Ratio between E without/with pileup; ")
h2.SetFillStyle(3000)  # hist with outline, not filled histogram
line = TLine(0,1,2000,1)
c1 = TCanvas ("c1","stacked hists",10,10,800,600)
c1.cd(1)
h2.Draw()
line.Draw("same")
c1.Draw()  

LZTLabel(c1, 0.1, 0.92, '#sqrt{s}=13TeV')
c1.SaveAs(f"{args.outputPath}/jet_LZT_ratioE.pdf")